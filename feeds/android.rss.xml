<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>suphy' Blog</title><link>http://suphy2009.github.io/</link><description></description><atom:link href="http://suphy2009.github.io/feeds/android.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 18 Feb 2014 17:37:00 +0800</lastBuildDate><item><title>如何在Android jni中使用Log</title><link>http://suphy2009.github.io/android/android_jni_log.html</link><description>&lt;h2&gt;打开Android C/C++文件中的Log&lt;/h2&gt;
&lt;h3&gt;方法一：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在Android.mk文件中加入：&lt;code&gt;LOCAL_LDLIBS := -llog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在要使用log的cpp文件中加入：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;utils/Log.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define LOG_TAG &amp;quot;TAGNAME&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE,LOG_TAG,__VA_ARGS__)&lt;/span&gt;
&lt;span class="cp"&gt;#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)&lt;/span&gt;
&lt;span class="cp"&gt;#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)&lt;/span&gt;
&lt;span class="cp"&gt;#define LOGW(...) __android_log_print(ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)&lt;/span&gt;
&lt;span class="cp"&gt;#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;在需要打印log的地方使用: &lt;code&gt;LOGD("************")&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注: 当然也可以在程序中直接使用&lt;code&gt;__android_log_print&lt;/code&gt;打印log，无须定义宏；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;方法二：&lt;/h3&gt;
&lt;p&gt;Android4.1中，log有了一些打印，具体可以参考system/core/include/cutils/log.h，该文件中定义了控制那些log输出的宏。&lt;/p&gt;
&lt;p&gt;Android的编译参数中，加入了-DNDEBUG，也就是默认no debug；
当-DNDEBUG被打上后，默认ALOGV会被禁止; 但是我们可以使用 &lt;em&gt;LOG_NDEBUG&lt;/em&gt;、&lt;em&gt;LOG_NIDEBUG&lt;/em&gt;、&lt;em&gt;LOG_NDDEBUG&lt;/em&gt;这三个宏控制LOG_PRI(priority, tag, ...)&lt;/p&gt;
&lt;p&gt;可以一次打开LOGV，LOGI，LOGD，也可以分别打开：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#undef NDEBUG            &lt;/span&gt;&lt;span class="c1"&gt;//打开LOGV/LOGI/LOGD&lt;/span&gt;

&lt;span class="cp"&gt;#define LOG_NDEBUG   0   &lt;/span&gt;&lt;span class="c1"&gt;//打开LOGV&lt;/span&gt;
&lt;span class="cp"&gt;#define LOG_NIDEBUG  0   &lt;/span&gt;&lt;span class="c1"&gt;//打开LOGI&lt;/span&gt;
&lt;span class="cp"&gt;#define LOG_NDDEBUG 0    &lt;/span&gt;&lt;span class="c1"&gt;//打开LOGD&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;举例：&lt;/h4&gt;
&lt;p&gt;果要看AndroidRuntime的LOGI和LOGD，可以有这样2种写法：&lt;/p&gt;
&lt;p&gt;第一种：&lt;/p&gt;
&lt;p&gt;NDEBUG - LOG_NDEBUG = LOG_NIDEBUG + LOG_NIDEBUG&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define LOG_TAG &amp;quot;AndroidRuntime&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#undef NDEBUG&lt;/span&gt;
&lt;span class="cp"&gt;#define LOG_NDEBUG 1&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;utils/Log.h&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二种：&lt;/p&gt;
&lt;p&gt;G_NIDEBUG + LOG_NIDEBUG&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define LOG_TAG &amp;quot;AndroidRuntime&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define LOG_NIDEBUG 0&lt;/span&gt;
&lt;span class="cp"&gt;#define LOG_NDDEBUG 0&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;utils/Log.h&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">suphy</dc:creator><pubDate>Tue, 18 Feb 2014 17:37:00 +0800</pubDate><guid>tag:suphy2009.github.io,2014-02-18:android/android_jni_log.html</guid><category>NDK</category></item><item><title>Android内存分析和调优</title><link>http://suphy2009.github.io/android/android-memory.html</link><description>&lt;h1&gt;Android内存分析和调优&lt;/h1&gt;
&lt;h3&gt;内存相关名词解释：VSS/RSS/PSS/USS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;VSS Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）&lt;/li&gt;
&lt;li&gt;RSS Resident Set Size 实际使用物理内存（包含共享库占用的内存）&lt;/li&gt;
&lt;li&gt;PSS Proportional Set Size 实际使用的物理内存（比例分配共享库占用的内存）&lt;/li&gt;
&lt;li&gt;USS Unique Set Size 进程独自占用的物理内存（不包含共享库占用的内存）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说内存占用大小有如下规律：VSS &amp;gt;= RSS &amp;gt;= PSS &amp;gt;= USS&lt;/p&gt;
&lt;p&gt;要优化内存，首先要做的就是分析内存占用情况。android提供了多个工具和命令进行内存分析&lt;/p&gt;
&lt;h3&gt;第一层 procrank命令&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;adb shell procrank&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以使用以下命令连续查看某一进程内存使用情况：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;while true; do procrank | grep com.taobao.ju.android; sleep 5; done&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;它从/proc/pid/maps中读取信息来进行统计。源码位于：/system/extras/procrank;
该命令可以列出当前系统所有进程的内存占用情况，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PID&lt;/span&gt;       &lt;span class="n"&gt;Vss&lt;/span&gt;      &lt;span class="n"&gt;Rss&lt;/span&gt;      &lt;span class="n"&gt;Pss&lt;/span&gt;      &lt;span class="n"&gt;Uss&lt;/span&gt;  &lt;span class="n"&gt;cmdline&lt;/span&gt;
&lt;span class="mi"&gt;24255&lt;/span&gt;  &lt;span class="mi"&gt;1058576&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="mi"&gt;126108&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;84945&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;79296&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zhihu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;daily&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;
&lt;span class="mi"&gt;23373&lt;/span&gt;  &lt;span class="mi"&gt;1088216&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="mi"&gt;102852&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;63406&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;59344&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alibaba&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;babylon&lt;/span&gt;
&lt;span class="mi"&gt;23777&lt;/span&gt;   &lt;span class="mi"&gt;966024&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;92384&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;61982&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;58244&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tencent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mm&lt;/span&gt;
&lt;span class="mi"&gt;14729&lt;/span&gt;   &lt;span class="mi"&gt;995188&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;99964&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;61432&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;55392&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;netease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newsreader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;
 &lt;span class="mi"&gt;3246&lt;/span&gt;  &lt;span class="mi"&gt;1054912&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;96992&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;59458&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;54600&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taobao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ju&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;
  &lt;span class="mi"&gt;605&lt;/span&gt;  &lt;span class="mi"&gt;1043552&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;85772&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;57351&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;53724&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="n"&gt;system_server&lt;/span&gt;
  &lt;span class="mi"&gt;693&lt;/span&gt;   &lt;span class="mi"&gt;961644&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;72712&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;46478&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;43600&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemui&lt;/span&gt;
&lt;span class="mi"&gt;14415&lt;/span&gt;   &lt;span class="mi"&gt;975220&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;72012&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;39411&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;36548&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="n"&gt;air&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pioupiou&lt;/span&gt;
 &lt;span class="mi"&gt;9052&lt;/span&gt;   &lt;span class="mi"&gt;983784&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;72528&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;35451&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;31268&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sina&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weibo&lt;/span&gt;
&lt;span class="mi"&gt;27142&lt;/span&gt;   &lt;span class="mi"&gt;946320&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;56992&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;31705&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;30204&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dialer&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="mi"&gt;169&lt;/span&gt;     &lt;span class="mi"&gt;1068&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;484&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;153&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;qcks&lt;/span&gt;
  &lt;span class="mi"&gt;165&lt;/span&gt;     &lt;span class="mi"&gt;1424&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;144&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sbin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;healthd&lt;/span&gt;
  &lt;span class="mi"&gt;625&lt;/span&gt;     &lt;span class="mi"&gt;1048&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;440&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;129&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;124&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;efsks&lt;/span&gt;
  &lt;span class="mi"&gt;212&lt;/span&gt;      &lt;span class="mi"&gt;924&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;328&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;118&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
  &lt;span class="mi"&gt;166&lt;/span&gt;     &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;340&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;112&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;servicemanager&lt;/span&gt;
  &lt;span class="mi"&gt;211&lt;/span&gt;     &lt;span class="mi"&gt;2116&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;468&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;      &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;qseecomd&lt;/span&gt;
 &lt;span class="mi"&gt;6943&lt;/span&gt;      &lt;span class="mi"&gt;868&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;332&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;104&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="n"&gt;wdaemon&lt;/span&gt;
&lt;span class="mi"&gt;31257&lt;/span&gt;      &lt;span class="mi"&gt;888&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;316&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;      &lt;span class="mi"&gt;94&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;      &lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;estrongs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libestool2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;
&lt;span class="mi"&gt;18647&lt;/span&gt;      &lt;span class="mi"&gt;856&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;      &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;      &lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UCMobile&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;UCMobile&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;amodel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
                           &lt;span class="o"&gt;------&lt;/span&gt;   &lt;span class="o"&gt;------&lt;/span&gt;  &lt;span class="o"&gt;------&lt;/span&gt;
                          &lt;span class="mi"&gt;981273&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="mi"&gt;886808&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="n"&gt;TOTAL&lt;/span&gt;

&lt;span class="nl"&gt;RAM:&lt;/span&gt; &lt;span class="mi"&gt;1878788&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;77468&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;138504&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;buffers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;596304&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;cached&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8420&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;shmem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63432&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;slab&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看具体某一进程使用&lt;code&gt;cat proc/pid/status&lt;/code&gt; 如：&lt;code&gt;cat /proc/3246/status&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VmPeak: 表示进程所占用最大虚拟内存大小&lt;/li&gt;
&lt;li&gt;VmSize: 表示进程当前虚拟内存大小&lt;/li&gt;
&lt;li&gt;VmLck: 表示被锁定的内存大小&lt;/li&gt;
&lt;li&gt;VmHWM: 表示进程所占用物理内存的峰值&lt;/li&gt;
&lt;li&gt;VmRSS: 表示进程当前占用物理内存的大小(与procrank中的RSS)&lt;/li&gt;
&lt;li&gt;VmData: 表示进程数据段的大小&lt;/li&gt;
&lt;li&gt;VmStk: 表示进程堆栈段的大小&lt;/li&gt;
&lt;li&gt;VmExe: 表示进程代码的大小&lt;/li&gt;
&lt;li&gt;VmLib: 表示进程所使用共享库的大小&lt;/li&gt;
&lt;li&gt;VmPTE: 表示进程页表项的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="images" src="../static/images/cat_proc_pid_status.png" /&gt;&lt;/p&gt;
&lt;p&gt;通过procrank，只能很宏观的横向比较不同的应用。如果要更细致的了解具体内存是如何使用，则需要进入.&lt;/p&gt;
&lt;h3&gt;第二层 dumpsys meminfo&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;adb shell dumpsys meminfo package.name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="dumpsys meminfo" src="../static/images/dumpsys_meminfo.png" /&gt;&lt;/p&gt;
&lt;h3&gt;第三层 adb shell showmap pid&lt;/h3&gt;
&lt;p&gt;该命令也是读取smaps文件，但结果细化的具体的vm area.&lt;/p&gt;
&lt;p&gt;该命令输出的每行表示一个vm area，列出了该vm area的start addr, end addr, Vss, Rss, Pss, shared clean, shared dirty, private clean, private dirty，object。&lt;/p&gt;
&lt;p&gt;第二层的dumpsys meminfo其实就是读取这些数据，然后分类（native, dalvik, .so map, etc.)统计生成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start addr和end addr表示进程空间的起止虚拟地址。&lt;/li&gt;
&lt;li&gt;Vss，Rss，Pss跟前面说的一样。&lt;/li&gt;
&lt;li&gt;Object可以看做mmap的文件名。&lt;/li&gt;
&lt;li&gt;Shared clean，按字面意思，表示共享的干净的数据。共享表示多个进程的虚拟地址可以都指向这块物理空间，表示多个进程共享的so库&lt;/li&gt;
&lt;li&gt;Private clean，包括该进程私有的干净的内存。包括前面说的该进程独自使用的so和进程的二进制代码段。&lt;/li&gt;
&lt;li&gt;Private dirty，表示该进程私有的不跟disk数据一致的内存段。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;与Dalvik GC相关的属性&lt;/h1&gt;
&lt;p&gt;Logcat输出的log中，当垃圾回收器工作时，可以在Logcat中看到他的信息，类似于：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dalvikm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;14302&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GC_CONCURRENT&lt;/span&gt; &lt;span class="n"&gt;freed&lt;/span&gt; &lt;span class="mi"&gt;2349&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;free&lt;/span&gt; &lt;span class="mi"&gt;3246&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9551&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt; &lt;span class="mi"&gt;4703&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5261&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;paused&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中D/dalvikvm表示由dalvikvm输出的调试信息，括号后的数字代表dalvikvm所在进程的pid.
在dalvik中，GC的类型有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GC_EXPLICIT&lt;br /&gt;
    应用主动调用System.gc()产生的GC事件&lt;/li&gt;
&lt;li&gt;GC_FOR_ALLOC&lt;br /&gt;
    内存分配时，发现可用内存不够时触发的GC事件&lt;/li&gt;
&lt;li&gt;GC_CONCURRENT&lt;br /&gt;
    当堆变得很大，防止出现堆溢出异常时产生&lt;/li&gt;
&lt;li&gt;GC_FOR_MALLOC&lt;br /&gt;
    如果GC_CONCURENT类型的操作没有及时运行，并且应用程序还需要分配更多内存时产生。&lt;/li&gt;
&lt;li&gt;GC_EXTERNAL_ALLOC&lt;br /&gt;
    外部内存分配失败时触发&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;freed 2349K&lt;/code&gt; 表示本次垃圾收集释放了2349K的内存。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;65% free 3246K/9551K&lt;/code&gt; 其中9551K表示当前内存总量，3246K表示可用内存，65%表示可用内存占总内存的比例&lt;/p&gt;
&lt;p&gt;&lt;code&gt;external 4703K/5261K&lt;/code&gt; 表示可用外部内存/外部内存总量 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;paused 2ms+2ms&lt;/code&gt; 第一个时间值表示markrootset的时间，第二个时间值表示第二次mark的时间。如果触发原因不是GC_CONCURRENT，这一行为单个时间值，表示垃圾收集的耗时时间&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">suphy</dc:creator><pubDate>Thu, 13 Feb 2014 20:03:00 +0800</pubDate><guid>tag:suphy2009.github.io,2014-02-13:android/android-memory.html</guid><category>内存优化</category></item><item><title>Android Graphics 之 Paint类方法详解</title><link>http://suphy2009.github.io/android/graphics-paint-method.html</link><description>&lt;h2&gt;Android Graphics 之 Paint类方法详解&lt;/h2&gt;
&lt;h3&gt;资源文件string标签属性translatable&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;app_filter_class&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;translatable=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;xxx&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;属性translatable="false" 表示不希望该字符串随着语言环境的变化而变化。
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h3&gt;设置画笔Paint的setMaskFilter&lt;/h3&gt;
&lt;p&gt;MaskFilter类可以为paint分配边缘效果。对MaskFilter的扩展可以对一个Paint边缘alpha通道应用转换。&lt;/p&gt;
&lt;p&gt;BlurMaskFilter 指定一个模糊的样式和半径来处理Paint的边缘。
EmBossMaskFilter 指定了光源的方向和环境光强度来添加浮雕效果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sBlurPaint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMaskFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BlurMaskFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BlurMaskFilter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Blur&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NORMAL&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;注：MaskFilter是对Paint的alpha通道的转换，而ColorFilter是对每个GRB通道应用转换，所有由ColorFilter所派生的类在执行它们的转换时，都会忽略alpha通道。
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;设置Paint的setColorFilter()&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ColorMatrix&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorMatrix&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//改变饱和度，传入一个大于 1 的数字将增加饱和度,而传入一个 0~1 之间的数字会减少饱和度。0 值将产生一幅灰度图像&lt;/span&gt;
&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setSaturation&lt;/span&gt;&lt;span class="o"&gt;(.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setColorFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorMatrixColorFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;设置Paint的setPathEffect()&lt;/h3&gt;
&lt;p&gt;PathEffect是用来控制绘制轮廓的方式。PathEffect对于绘制Path基本图形特别有用，但是它们也可以应用到任何Paint中从而影响线条绘制的方式。使用PathEffect，可以改变一个形状的边角的外观并且控制轮廓的外表。Android包含了多个PathEffect，包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CornerPathEffect  可以使用圆角来代替尖锐的角从而对基本图形的形状尖锐的边角进行平滑。&lt;/li&gt;
&lt;li&gt;DashPathEffect  可以使用DashPathEffect来创建一个虚线的轮廓(短横线/小圆点)，而不是使用实线。你还可以指定任意的虚/实线段的重复模式&lt;/li&gt;
&lt;li&gt;DiscretePathEffect  与DashPathEffect相似，但是添加了随机性。当绘制它的时候，需要指定每一段的长度和与原始路径的偏离度&lt;/li&gt;
&lt;li&gt;PathDashPathEffect  这种效果可以定义一个新的形状(路径)并将其用作原始路径的轮廓标记。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面两张效果可以在一个Paint中组合使用多个PathEffect:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SumPathEffect  顺序地在一条路径中添加两种效果，这样每一种效果都可以应用到原始路径中，而且两种结果可以结合起来。&lt;/li&gt;
&lt;li&gt;ComposePathEffect  将两种效果组合起来应用，先使用第一种效果，然后在这种效果的基础上应用第二种效果&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;设置Paint的setXfermode() 用于图像的合成&lt;/h3&gt;
&lt;p&gt;合成是将两幅图像放在一起的动作,它使得我们能够同时看到两幅图像的特征。&lt;/p&gt;
&lt;p&gt;在 Android SDK 中,可以通过首先在 Canvas 对象绘制一个位图对象,然后在相同的 Canvas 对象上绘制第二个位图对象的方式来实现合成。唯一的区别是在绘制第二幅图像 时,需要在 Paint 对象上指定一个过渡模式(Xfermode)。&lt;/p&gt;
&lt;p&gt;设置图像叠加时的处理方式，如合并，取交集，经常用来制作皮擦得擦除效果。&lt;/p&gt;
&lt;p&gt;橡皮擦，这是个好方法啊，看看。&lt;/p&gt;
&lt;p&gt;可以通过修改Paint的Xfermode来影响在Canvas已有的图像上面绘制新的图像的方式。可用作过渡模式的类集合都继承自 Xfermode 基类,而且其中包括一个称为 PorterDuff- Xfermode 的类。&lt;/p&gt;
&lt;p&gt;在正常的情况下，在已有的图像上绘图将会在其上面添加一层新的形状。如果新的Paint是完全不透明的，那么它将完全遮挡住下面的Paint；如果它是部分透明的，那么它将会被染上下面的颜色。下面的Xfermode子类可以改变这种行为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AvoidXfermode  指定了一个颜色和容差，强制Paint避免在它上面绘图(或者只在它上面绘图)&lt;/li&gt;
&lt;li&gt;PixelXorXfermode  当覆盖已有的颜色时，应用一个简单的像素XOR操作&lt;/li&gt;
&lt;li&gt;PorterDuffXfermode  这是一个非常强大的转换模式，使用它，可以使用图像合成的16条Porter-Duff规则的任意一条来控制Paint如何与已有的Canvas图像进行交互&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要应用转换模式，可以使用setXferMode方法，如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="n"&gt;AvoidXfermode&lt;/span&gt; &lt;span class="n"&gt;avoid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AvoidXfermode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AvoidXfermode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Mode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;AVOID&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; 
 &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setXfermode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;avoid&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里可以实现完美的橡皮擦功能！代码异常简单：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Xfermode&lt;/span&gt; &lt;span class="n"&gt;xFermode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PorterDuffXfermode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PorterDuff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Mode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CLEAR&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setXfermode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xFermode&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 Android 的 PorterDuff.Mode 类中列举了图像的重叠绘制模式&lt;/p&gt;
&lt;p&gt;&lt;img alt="PorterDuff Mode" src="../static/images/porterduff_mode.png" /&gt;&lt;/p&gt;
&lt;p&gt;这些规则包括如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PorterDuff.Mode.SRC : 此规则意味着只绘制源图像,在当前情况
下,它是正在应用此规则的 Paint 对象;&lt;/li&gt;
&lt;li&gt;PorterDuff.Mode.DST:此规则意味着只显示目标图像,即已在画
布上的初始图像;&lt;/li&gt;
&lt;li&gt;PorterDuff.Mode.DST_OVER:将在源图像的顶部绘制目标图像;&lt;/li&gt;
&lt;li&gt;PorterDuff.Mode.DST_IN:将仅仅在源图像和目标图像相交的地方
绘制目标图像。&lt;/li&gt;
&lt;li&gt;PorterDuff.Mode.DST_OUT:将仅仅在源图像和目标图像不相交的
地方绘制目标图像。&lt;/li&gt;
&lt;li&gt;PorterDuff.Mode.DST_ATOP:将在目标图像与源图像相交的地方
    绘制目标图像;在其他地方绘制源图像。&lt;/li&gt;
&lt;li&gt;PorterDuff.Mode.SRC_OVER:将在目标图像的顶部绘制源图像。&lt;/li&gt;
&lt;li&gt;PorterDuff.Mode.SRC_IN:将仅仅在目标图像和源图像相交的地方
绘制源图像。&lt;/li&gt;
&lt;li&gt;PorterDuff.Mode.SRC_OUT:将仅仅在目标图像和源图像不相交的
地方绘制源图像。&lt;/li&gt;
&lt;li&gt;PorterDuff.Mode.SRC_ATOP:将在源图像与目标图像相交的地方 绘制源图像;在其他地方绘制目标图像&lt;/li&gt;
&lt;li&gt;PorterDuff.Mode.XOR:将在源图像和目标图像重叠之外的任何地 方绘制它们,而在它们重叠的地方不绘制任何内容。&lt;/li&gt;
&lt;li&gt;PorterDuff.Mode.LIGHTEN:获得每个位置上两幅图像中最亮的像
素并显示。&lt;/li&gt;
&lt;li&gt;PorterDuff.Mode.DARKEN:获得每个位置上两幅图像中最暗的像
素并显示。&lt;/li&gt;
&lt;li&gt;PorterDuff.Mode.MULTIPLY:将每个位置的两个像素相乘,除以
255,然后使用该值创建一个新的像素进行显示。结果颜色=顶部颜色×底部颜色
/255。&lt;/li&gt;
&lt;li&gt;PorterDuff.Mode.SCREEN:反转每个颜色,执行相同的操作(将它
们相乘并除以 255),然后再次反转。结果颜色=255−(((255−顶部颜色)×(255−底部
颜色))/255)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Matrix类&lt;/h2&gt;
&lt;p&gt;当在现有位图对象上进行绘制或从一个位图对象创建另外一个位图对象时，可以使用Matrix类。这个类使得我们能够在一副图像上应用空间转换。这中类型的转换可以是旋转、剪切、缩放或更改图像的坐标空间。&lt;/p&gt;
&lt;p&gt;Matrix类以9个数字的数组表示。Matrix类中每个数字都将应用于图像上每个点的3个坐标（x,y,z）之一。&lt;/p&gt;
&lt;p&gt;例如，下面是一个包含9个浮点数的矩阵：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一行&lt;code&gt;(1 0 0)&lt;/code&gt; 指定图像的x坐标: &lt;code&gt;x = 1x + 0y + 0z&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;第二行&lt;code&gt;(0 1 0)&lt;/code&gt; 指定图像的y坐标: &lt;code&gt;y = 0x + 1y + 0z&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;第三环&lt;code&gt;(0 0 1)&lt;/code&gt; 指定图像的z坐标: &lt;code&gt;z = 0x + 0y + 1z&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;即转换后的图像坐标为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样变换处理后矩阵不会做任何转换，所有内容都会按照它在源图像中的位置一样。&lt;/p&gt;
&lt;p&gt;用代码表示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Matrix&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Matrix&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setValues&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;[]{&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drawBitmap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bmp&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Matrix类方法&lt;/h2&gt;
&lt;p&gt;Matrix类帮助我们完成了大部分想要完成的工作，在实际开发中我们大多数时间会使用Matrix的方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;旋转 Matrix.setRotate(float)&lt;/p&gt;
&lt;p&gt;它接收一个浮点数表示旋转的角度，默认围绕点(0,0),正数将顺时针旋转图像，而负数将逆时针旋转，默认旋转点是图像的左上角。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Matrix matrix = new Matrix();
matrix.setRotate(15);
canvas.drawBitmap(bmp, matrix, paint);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外，也可以使用旋转角度及围绕的旋转点作为参数调用setRotate().如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;matrix.setRotate(15,bmp.getWidth()/2,bmp.getHeight()/2);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缩放 Matrix.setScale(float,float)&lt;/p&gt;
&lt;p&gt;接收两个浮点数参数，分别表示在x,y轴上所产生的缩放量；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;matrix.setScale(1.5f,1);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平移 Matrix.setTranslate(float,float)&lt;/p&gt;
&lt;p&gt;两个float参数表示分别在x,y轴上移动的数量。&lt;/p&gt;
&lt;p&gt;在 x 轴上使用正数进行平移将向右移动图像,而使用负数将向左移动图像。在 y 轴上使用正数 进行平移将向下移动图像,而使用负数将向上移动图像。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setTranslate(1.5f,-10);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;preXXX 和 postXXX&lt;/p&gt;
&lt;p&gt;以上几个方法也都有之前和之后的版本，这使得我们能够每次按顺序完成一个以上的转换。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;镜像&lt;/p&gt;
&lt;p&gt;一个特别有用的方法对是 setScale 和 postTranslate,它们允许跨单个轴(或者两个轴)翻 转图像。如果以一个负数缩放,那么会将该图像绘制到坐标系统的负值空间。由于(0,0)点 位于左上角,使用 x 轴上的负数会导致向左绘制图像。因此我们需要使用 postTranslate 方 法,将图像向右移动&lt;/p&gt;
&lt;p&gt;&lt;code&gt;matrix.setScale(-1, 1);
matrix.postTranslate(bmp.getWidth(),0);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;翻转&lt;/p&gt;
&lt;p&gt;可以在 y 轴上做同样的事情,翻转图像以使其倒置。通过将图像围绕两个轴上的中心
点旋转 180°,可以实现相同的效果.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;matrix.setScale(1, -1);
matrix.postTranslate(0, bmp.getHeight());&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绘制替代图像&lt;/p&gt;
&lt;p&gt;在之前使用的方法存在一缺点是图像会被截断，因为没有计算转换后的结果大小。&lt;/p&gt;
&lt;p&gt;解决方法：当初次创建位图对象时，应用Matrix对象而不是绘制到一个空的位图对象中。通过这种方式将无须获得Canvas和Paint对象。缺点是不能继续更改位图对象，因为如果想要对其进行任何转换，那么需要重新创建它。&lt;/p&gt;
&lt;p&gt;可以使用&lt;code&gt;Bitmap.createBitmap(Bitmap source, int x, int y, int width, int height, Matrix matrix, boolean filter)&lt;/code&gt; 方法.&lt;/p&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bitmap source : 源位图对象&lt;/li&gt;
&lt;li&gt;int x, int y, int width, int height : 分别是源图像的初始x,y,宽度,高度&lt;/li&gt;
&lt;li&gt;Matrix matrix &lt;/li&gt;
&lt;li&gt;boolean filter : 表示是否在图像上应用某种过滤器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;图像处理&lt;/h3&gt;
&lt;p&gt;另外一种图像编辑或处理的形式是必须处理像素自身颜色值的变化。这将使得我们能够改变对比度，亮度，整体色调等。&lt;/p&gt;
&lt;h4&gt;ColorMatrix&lt;/h4&gt;
&lt;p&gt;类似于在Canvas对象上绘制时使用Matrix对象的方法，也可以使用一个ColorMatrix对象来改变用于在Canvas对象上绘制的Paint对象。&lt;/p&gt;
&lt;p&gt;ColorMatrix是一个数字数组，可以对图像的像素进行操作。然而不同于操作x,y,z坐标，他操作颜色值--每个像素的R(红)、R(绿)、B(蓝)和Alpha值。&lt;/p&gt;
&lt;p&gt;如下使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ColorMatrix&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorMatrix&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//改变饱和度，传入一个大于 1 的数字将增加饱和度,而传入一个 0~1 之间的数字会减少饱和度。0 值将产生一幅灰度图像&lt;/span&gt;
&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setSaturation&lt;/span&gt;&lt;span class="o"&gt;(.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setColorFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorMatrixColorFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认的 ColorMatrix 对象就是所谓的标识,就像默认的 Matrix 对象一样,当应用它时 不会改变图像。查看以下这个数组所包含的内容将帮助我们理解它如何工作。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一行包含了在单个像素的红色部分上发生的操作
第二行影响绿色部分，第三行操作蓝色部分，最后一行操作像素的Alpha值。&lt;/p&gt;
&lt;p&gt;而在每一行中，一个数字是与像素的红色值相关联的乘数,第二个数字是与绿色值相 关联的乘数,第三个数字与蓝色相关,第四个数字与 Alpha 值相关,而最后一个数字不会 与任何值相乘。将这些值都加起来以改变它们正在操作的像素。&lt;/p&gt;
&lt;p&gt;假设现在有一个中等灰度像素，其红色值：128，绿色值：128，蓝色值：128，Alpha值：0（不透明）
通过颜色矩阵操作这个像素，那么数学公式如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以的值都将保持不变，设置为128。对于用于像素的任何颜色变量,情况都将如此, 因为每一行在操作代表它的颜色的位置都有一个 1,而在其他位置均为 0。&lt;/p&gt;
&lt;p&gt;如果想让一幅图看起来比之前红两倍，那么可以操作所有的像素的红色值的数字增加为2. 如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用代码实现如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ColorMatrix&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorMatrix&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setColorFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorMatrixColorFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;操作ColorMatrix改变对比度和亮度&lt;/h4&gt;
&lt;p&gt;可以通过增加或减少颜色值来调整图像的亮度和对比度。
以下代码将对每个颜色通道的强度加倍,其将影响到图像的亮度和对比度&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ColorMatrix&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorMatrix&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;contrast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;contrast&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contrast&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contrast&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setColorFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorMatrixColorFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个示例中,两个效果是相链接的。如果只想增加对比度而不增加亮度,那么实际
上必须降低亮度来补偿在颜色强度方面的增加。&lt;/p&gt;
&lt;p&gt;通常,当调整亮度时,对每种颜色只使用矩阵的最后一列会更加简单。这仅仅是添加
到颜色值的量,而无须乘以已有的颜色值。&lt;/p&gt;
&lt;p&gt;因此,为了降低亮度,可以使用矩阵代码如下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ColorMatrix&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorMatrix&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setColorFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorMatrixColorFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将这两种转换合在一起将产生如下代码。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ColorMatrix&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorMatrix&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;contrast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;contrast&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contrast&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contrast&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contrast&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setColorFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorMatrixColorFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;改变饱和度&lt;/h4&gt;
&lt;p&gt;幸运的是,无须知道每个想要完成的操作所对应的公式。例如,ColorMatrix 类有一个 内置的方法可用于改变饱和度。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ColorMatrix&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorMatrix&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; 
&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setSaturation&lt;/span&gt;&lt;span class="o"&gt;(.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setColorFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ColorMatrixColorFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;传入一个大于 1 的数字将增加饱和度,而传入一个 0~1 之间的数字会减少饱和度。0 值将产生一幅灰度图像。&lt;/p&gt;
&lt;h3&gt;总结：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;paint.setMaskFilter() 操作paint边缘效果,MaskFilter是对Paint的alpha通道的转换&lt;/li&gt;
&lt;li&gt;paint.setColorFilter() ColorFilter是对每个GRB通道应用转换&lt;/li&gt;
&lt;li&gt;Paint.setPathEffect() 可以改变一个形状的边角的外观并且控制轮廓的外表&lt;/li&gt;
&lt;li&gt;Paint.setXfermode() 用于图像合成，可以通过修改Paint的Xfermode来影响在Canvas已有的图像上面绘制新的图像的方式&lt;/li&gt;
&lt;li&gt;Paint.setAntiAlias(boolean aa)设置是否使用抗锯齿功能，会消耗较大资源，绘制图形速度会变慢。&lt;/li&gt;
&lt;li&gt;paint.setDither(boolean dither) 设定是否使用图像抖动处理，会使绘制出来的图片颜色更加平滑和饱满，图像更加清晰&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">suphy</dc:creator><pubDate>Tue, 11 Feb 2014 23:39:00 +0800</pubDate><guid>tag:suphy2009.github.io,2014-02-11:android/graphics-paint-method.html</guid><category>graphics</category><category>paint</category></item></channel></rss>